<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Todo App</title>
    <link rel="stylesheet" href="style.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.7.2/css/all.min.css"
      integrity="sha512-Evv84Mr4kqVGRNSgIGL/F/aIDqQb7xQ2vcrdIwxfjThSH8CSR7PBEakCr51Ck+w+/U6swU2Im1vVX0SVk9ABhg=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
  </head>
  <body>
    <div class="app">
      <header>
        <h1>
          <i class="fas fa-check-circle"></i>
          My Tasks
        </h1>
        <p id="date"></p>
      </header>

      <div class="todo-input">
        <input type="text" id="task-input" placeholder="What do you need to do?" />
        <button id="add-task">
          <i class="fas fa-plus"></i>
        </button>
      </div>

      <div class="filters">
        <span class="filter active" data-filter="all"> All </span>
        <span class="filter" data-filter="active"> Active </span>
        <span class="filter" data-filter="completed"> Completed </span>
      </div>

      <div class="todos-container">
        <ul id="todos-list">
          <!-- li will be inserted right here later in the video -->
          <!-- <li class="todo-item">
            <label class="checkbox-container">
              <input type="checkbox" class="todo-checkbox" />
              <span class="checkmark"></span>
            </label>
            <span class="todo-item-text">Buy groceries</span>
            <button class="delete-btn"><i class="fas fa-times"></i></button>
          </li> -->
        </ul>
        <div class="empty-state hidden">
          <i class="fas fa-clipboard-list"></i>
          <p>No tasks here yet</p>
        </div>
      </div>

      <footer>
        <p id="items-left">0 items left</p>
        <button id="clear-completed">Clear completed</button>
      </footer>
    </div>

    <script src="script.js"></script>
  </body>
</html>
// DOM Elements
const taskInput = document.getElementById("task-input");
const addTaskBtn = document.getElementById("add-task");
const todosList = document.getElementById("todos-list");
const itemsLeft = document.getElementById("items-left");
const clearCompletedBtn = document.getElementById("clear-completed");
const emptyState = document.querySelector(".empty-state");
const dateElement = document.getElementById("date");
const filters = document.querySelectorAll(".filter");

let todos = [];
let currentFilter = "all";

addTaskBtn.addEventListener("click", () => {
  addTodo(taskInput.value);
});

taskInput.addEventListener("keydown", (e) => {
  if (e.key === "Enter") addTodo(taskInput.value);
});

clearCompletedBtn.addEventListener("click", clearCompleted);

function addTodo(text) {
  if (text.trim() === "") return;

  const todo = {
    id: Date.now(),
    text,
    completed: false,
  };

  todos.push(todo);

  saveTodos();
  renderTodos();
  taskInput.value = "";
}

function saveTodos() {
  localStorage.setItem("todos", JSON.stringify(todos));
  updateItemsCount();
  checkEmptyState();
}

function updateItemsCount() {
  const uncompletedTodos = todos.filter((todo) => !todo.completed);
  itemsLeft.textContent = `${uncompletedTodos?.length} item${
    uncompletedTodos?.length !== 1 ? "s" : ""
  } left`;
}

function checkEmptyState() {
  const filteredTodos = filterTodos(currentFilter);
  if (filteredTodos?.length === 0) emptyState.classList.remove("hidden");
  else emptyState.classList.add("hidden");
}

function filterTodos(filter) {
  switch (filter) {
    case "active":
      return todos.filter((todo) => !todo.completed);
    case "completed":
      return todos.filter((todo) => todo.completed);
    default:
      return todos;
  }
}

function renderTodos() {
  todosList.innerHTML = "";

  const filteredTodos = filterTodos(currentFilter);

  filteredTodos.forEach((todo) => {
    const todoItem = document.createElement("li");
    todoItem.classList.add("todo-item");
    if (todo.completed) todoItem.classList.add("completed");

    const checkboxContainer = document.createElement("label");
    checkboxContainer.classList.add("checkbox-container");

    const checkbox = document.createElement("input");
    checkbox.type = "checkbox";
    checkbox.classList.add("todo-checkbox");
    checkbox.checked = todo.completed;
    checkbox.addEventListener("change", () => toggleTodo(todo.id));

    const checkmark = document.createElement("span");
    checkmark.classList.add("checkmark");

    checkboxContainer.appendChild(checkbox);
    checkboxContainer.appendChild(checkmark);

    const todoText = document.createElement("span");
    todoText.classList.add("todo-item-text");
    todoText.textContent = todo.text;

    const deleteBtn = document.createElement("button");
    deleteBtn.classList.add("delete-btn");
    deleteBtn.innerHTML = '<i class="fas fa-times"></i>';
    deleteBtn.addEventListener("click", () => deleteTodo(todo.id));

    todoItem.appendChild(checkboxContainer);
    todoItem.appendChild(todoText);
    todoItem.appendChild(deleteBtn);

    todosList.appendChild(todoItem);
  });
}

function clearCompleted() {
  todos = todos.filter((todo) => !todo.completed);
  saveTodos();
  renderTodos();
}

function toggleTodo(id) {
  todos = todos.map((todo) => {
    if (todo.id === id) {
      return { ...todo, completed: !todo.completed };
    }

    return todo;
  });
  saveTodos();
  renderTodos();
}

function deleteTodo(id) {
  todos = todos.filter((todo) => todo.id !== id);
  saveTodos();
  renderTodos();
}

function loadTodos() {
  const storedTodos = localStorage.getItem("todos");
  if (storedTodos) todos = JSON.parse(storedTodos);
  renderTodos();
}

filters.forEach((filter) => {
  filter.addEventListener("click", () => {
    setActiveFilter(filter.getAttribute("data-filter"));
  });
});

function setActiveFilter(filter) {
  currentFilter = filter;

  filters.forEach((item) => {
    if (item.getAttribute("data-filter") === filter) {
      item.classList.add("active");
    } else {
      item.classList.remove("active");
    }
  });

  renderTodos();
}

function setDate() {
  const options = { weekday: "long", month: "short", day: "numeric" };
  const today = new Date();
  dateElement.textContent = today.toLocaleDateString("en-US", options);
}

window.addEventListener("DOMContentLoaded", () => {
  loadTodos();
  updateItemsCount();
  setDate();
});
* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

:root {
  --primary: #7749f8;
  --primary-light: #9775fa;
  --dark: #212529;
  --light: #f8f9fa;
  --gray: #868e96;
  --danger: #fa5252;
  --success: #40c057;
  --border: #e9ecef;
}

body {
  font-family: sans-serif;
  background-color: #f1f3f5;
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  padding: 20px;
  color: var(--dark);
}

.app {
  width: 100%;
  max-width: 500px;
  background-color: #fff;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
}

header {
  background-color: var(--primary);
  color: white;
  padding: 20px 25px;
}

header h1 {
  font-size: 24px;
  margin-bottom: 5px;
  font-weight: 600;
}

header p {
  font-size: 14px;
  opacity: 0.9;
}

.todo-input {
  padding: 20px 25px;
  display: flex;
  gap: 10px;
  background-color: var(--light);
  border-bottom: 1px solid var(--border);
}

.todo-input input {
  flex: 1;
  padding: 12px 15px;
  border: 1px solid #dee2e6;
  font-size: 1rem;
  transition: all 0.2s;
  border-radius: 6px;
}

.todo-input input:focus {
  outline: none;
  border-color: var(--primary);
  box-shadow: 0 0 0 3px rgba(119, 73, 248, 0.15);
}

.todo-input button {
  background-color: var(--primary);
  color: white;
  width: 40px;
  height: 40px;
  border: none;
  border-radius: 6px;
  cursor: pointer;
  transition: all 0.2s;
}

.todo-input button:hover {
  background-color: var(--primary-light);
}

.filters {
  display: flex;
  gap: 15px;
  border-bottom: 1px solid var(--border);
  padding: 15px 25px;
}

.filter {
  padding: 5px 3px;
  cursor: pointer;
  color: var(--gray);
  border-bottom: 2px solid transparent;
  transition: all 0.2s;
}

.filter:hover {
  color: var(--primary);
}

.filter.active {
  color: var(--primary);
  border-bottom: 2px solid var(--primary);
  font-weight: 500;
}

.todos-container {
  padding: 15px 0;
  max-height: 300px;
  overflow-y: auto;
}

#todos-list {
  list-style-type: none;
}

.todo-item {
  padding: 12px 15px;
  display: flex;
  align-items: center;
  transition: background-color 0.2s;
}

.todo-item:hover {
  background-color: var(--light);
}

.checkbox-container {
  margin-right: 15px;
}

.todo-checkbox {
  opacity: 0;
  position: absolute;
}

.checkmark {
  display: inline-block;
  width: 20px;
  height: 20px;
  border: 2px solid #dee2e6;
  border-radius: 4px;
  position: relative;
  cursor: pointer;
  transition: all 0.2s;
}

.todo-checkbox:checked + .checkmark {
  background-color: var(--success);
  border-color: var(--success);
}

.todo-checkbox:checked + .checkmark::after {
  content: "";
  position: absolute;
  left: 6px;
  top: 2px;
  width: 5px;
  height: 10px;
  border: solid white;
  border-width: 0 2px 2px 0;
  transform: rotate(45deg);
}

.todo-item-text {
  flex: 1;
  font-size: 1rem;
  transition: all 0.2s;
}

.todo-item.completed .todo-item-text {
  text-decoration: line-through;
  color: var(--gray);
}

.delete-btn {
  background: none;
  border: none;
  color: var(--gray);
  cursor: pointer;
  font-size: 16px;
  opacity: 0;
  transition: all 0.2s;
}

.todo-item:hover .delete-btn {
  opacity: 1;
}

.delete-btn:hover {
  color: var(--danger);
}

.empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 40px 0;
  color: var(--gray);
}

.empty-state i {
  font-size: 40px;
  margin-bottom: 10px;
  opacity: 0.7;
}

.hidden {
  display: none;
}

footer {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px 25px;
  border-top: 1px solid var(--border);
  background-color: var(--light);
  font-size: 14px;
}

#items-left {
  color: var(--gray);
}

#clear-completed {
  background: none;
  border: none;
  color: var(--gray);
  cursor: pointer;
  transition: all 0.2s;
}

#clear-completed:hover {
  color: var(--danger);
}
